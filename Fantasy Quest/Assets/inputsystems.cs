//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/inputsystems.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Inputsystems: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Inputsystems()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""inputsystems"",
    ""maps"": [
        {
            ""name"": ""movement"",
            ""id"": ""d1419f88-ef89-4f1e-b68b-a3d4297aa5b2"",
            ""actions"": [
                {
                    ""name"": ""input"",
                    ""type"": ""Value"",
                    ""id"": ""5f4d3854-5c01-4ffd-acd9-44d0c0b9921e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8695a5aa-c466-4d68-8371-0762ea9e5edc"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""input"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""id"": ""ea9eb507-8f41-41fb-822d-c7c1e6728fee"",
            ""actions"": [
                {
                    ""name"": ""touchinput"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e8e01265-1381-4810-b169-f41e83d2d976"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""touchpress"",
                    ""type"": ""Button"",
                    ""id"": ""f38315c0-e935-4c58-a636-8638bd701b6d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""touchposition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4c2d638c-3e70-4ddd-a0cc-e60afc04953c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""13231869-95cd-4821-a096-4a42504230a5"",
                    ""path"": ""<Touchscreen>/primaryTouch"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""touchinput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8c75fb08-df3c-440a-b9af-5bc8a7105bc3"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""touchpress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba08a53b-bcb2-4c7c-8adf-dc318c18ceb4"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""touchposition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // movement
        m_movement = asset.FindActionMap("movement", throwIfNotFound: true);
        m_movement_input = m_movement.FindAction("input", throwIfNotFound: true);
        // Touch
        m_Touch = asset.FindActionMap("Touch", throwIfNotFound: true);
        m_Touch_touchinput = m_Touch.FindAction("touchinput", throwIfNotFound: true);
        m_Touch_touchpress = m_Touch.FindAction("touchpress", throwIfNotFound: true);
        m_Touch_touchposition = m_Touch.FindAction("touchposition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // movement
    private readonly InputActionMap m_movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_movement_input;
    public struct MovementActions
    {
        private @Inputsystems m_Wrapper;
        public MovementActions(@Inputsystems wrapper) { m_Wrapper = wrapper; }
        public InputAction @input => m_Wrapper.m_movement_input;
        public InputActionMap Get() { return m_Wrapper.m_movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @input.started += instance.OnInput;
            @input.performed += instance.OnInput;
            @input.canceled += instance.OnInput;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @input.started -= instance.OnInput;
            @input.performed -= instance.OnInput;
            @input.canceled -= instance.OnInput;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @movement => new MovementActions(this);

    // Touch
    private readonly InputActionMap m_Touch;
    private List<ITouchActions> m_TouchActionsCallbackInterfaces = new List<ITouchActions>();
    private readonly InputAction m_Touch_touchinput;
    private readonly InputAction m_Touch_touchpress;
    private readonly InputAction m_Touch_touchposition;
    public struct TouchActions
    {
        private @Inputsystems m_Wrapper;
        public TouchActions(@Inputsystems wrapper) { m_Wrapper = wrapper; }
        public InputAction @touchinput => m_Wrapper.m_Touch_touchinput;
        public InputAction @touchpress => m_Wrapper.m_Touch_touchpress;
        public InputAction @touchposition => m_Wrapper.m_Touch_touchposition;
        public InputActionMap Get() { return m_Wrapper.m_Touch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchActions set) { return set.Get(); }
        public void AddCallbacks(ITouchActions instance)
        {
            if (instance == null || m_Wrapper.m_TouchActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TouchActionsCallbackInterfaces.Add(instance);
            @touchinput.started += instance.OnTouchinput;
            @touchinput.performed += instance.OnTouchinput;
            @touchinput.canceled += instance.OnTouchinput;
            @touchpress.started += instance.OnTouchpress;
            @touchpress.performed += instance.OnTouchpress;
            @touchpress.canceled += instance.OnTouchpress;
            @touchposition.started += instance.OnTouchposition;
            @touchposition.performed += instance.OnTouchposition;
            @touchposition.canceled += instance.OnTouchposition;
        }

        private void UnregisterCallbacks(ITouchActions instance)
        {
            @touchinput.started -= instance.OnTouchinput;
            @touchinput.performed -= instance.OnTouchinput;
            @touchinput.canceled -= instance.OnTouchinput;
            @touchpress.started -= instance.OnTouchpress;
            @touchpress.performed -= instance.OnTouchpress;
            @touchpress.canceled -= instance.OnTouchpress;
            @touchposition.started -= instance.OnTouchposition;
            @touchposition.performed -= instance.OnTouchposition;
            @touchposition.canceled -= instance.OnTouchposition;
        }

        public void RemoveCallbacks(ITouchActions instance)
        {
            if (m_Wrapper.m_TouchActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITouchActions instance)
        {
            foreach (var item in m_Wrapper.m_TouchActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TouchActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TouchActions @Touch => new TouchActions(this);
    public interface IMovementActions
    {
        void OnInput(InputAction.CallbackContext context);
    }
    public interface ITouchActions
    {
        void OnTouchinput(InputAction.CallbackContext context);
        void OnTouchpress(InputAction.CallbackContext context);
        void OnTouchposition(InputAction.CallbackContext context);
    }
}
